// Author: @AliSawari 2023ma50[1]ma7[1]

//@version=5
indicator("HRN", shorttitle = "HRN", overlay=true)

// MA, RSI, MACD, ATR
MA1 = input(8, "MA1")
MA2 = input(20, "MA2")
MA3 = input(50, "MA3")

MA_offset = input(1, "MA Offset for Pullback Detection", "Used to replicate the same calculation with a slight offset")

ma8 = ta.sma(close, MA1)
ma20 = ta.sma(close, MA2)
ma50 = ta.sma(close, MA3)
rsi = ta.rsi(close, 14)
// [macdLine, signalLine, histLine] = ta.macd(close, 12, 26, 9)
atr = ta.atr(input(14))
// MA for pullback approximation
ma7 = ta.sma(close, MA1 - MA_offset)
ma19 = ta.sma(close, MA2 - MA_offset)
ma49 = ta.sma(close, MA3 - MA_offset)

// X,Y comparison factor
enable_X_Y_Calculations = input(true)
XYFactor = input(0.2, "X to Y ratio factor", "X should be (0.1) Y for a position to be valid")
XLookBack = input(10, "Bar count back for finding X")
YLookBack = input(3, "Bar count back for finding Y")

// MA diff calculation based on ATR
enable_MA_diff_calculation = input(true)
MA_diff_mult = input(0.5)
MA_diff_mult_value = (atr * MA_diff_mult)
ma1_2_diff = math.abs(ma8 - ma20)
ma2_3_diff = math.abs(ma20 - ma50)



isUptrend = (ma8 > ma20) and (ma20 > ma50) and (ma8[1] > ma20[1]) and (ma20[1] > ma50[1])
isUptrendFor50 =  (ma20 > ma50) and (ma20[1] > ma50[1])
isDowntrend = (ma8 < ma20) and (ma20 < ma50) and (ma8[1] < ma20[1]) and (ma20[1] < ma50[1])
isDowntrendFor50 = (ma20 < ma50) and (ma20[1] < ma50[1])

RSIValidationUptrend = rsi < 70 
RSIValidationDowntrend = rsi > 30

// MAs increasing in value
isMAsIncreasing = ma8 > ma8[1] and ma20 > ma20[1] and ma50 > ma50[1]
isMAsIncreasingFor50 = ma20 > ma20[1] and ma50 > ma50[1]
// MAs decreasing in value
isMAsDecreasing = ma8 < ma8[1] and ma20 < ma20[1] and ma50 < ma50[1]
isMAsDecreasingFor50 = ma20 < ma20[1] and ma50 < ma50[1]

// is either of the candles are in contact with the MA (approximation -2), in order to detect a Pullback on the MA
isHitting1 = (ma8 <= high and ma8 >= low) or (ma7 <= high and ma7 >= low)
isHitting2 = (ma8[1] <= high[1] and ma8[1] >= low[1]) or (ma7[1] <= high[1] and ma7[1] >= low[1])
isHitting3 = (ma8[2] <= high[2] and ma8[2] >= low[2]) or (ma7[2] <= high[2] and ma7[2] >= low[2])
isHittingMA8 = isHitting1 or isHitting2 or isHitting3
isHitting4 = (ma20 <= high and ma20 >= low) or (ma19 <= high and ma19 >= low)
isHitting5 = (ma20[1] <= high[1] and ma20[1] >= low[1]) or (ma19[1] <= high[1] and ma19[1] >= low[1])
isHitting6 = (ma20[2] <= high[2] and ma20[2] >= low[2]) or (ma19[2] <= high[2] and ma19[2] >= low[2])
isHittingMA20 = isHitting4 or isHitting5 or isHitting6
isHitting7 = (ma50 <= high and ma50 >= low) or (ma49 <= high and ma49 >= low)
isHitting8 = (ma50[1] <= high[1] and ma50[1] >= low[1]) or (ma49[1] <= high[1] and ma49[1] >= low[1])
isHitting9 = (ma50[2] <= high[2] and ma50[2] >= low[2]) or (ma49[2] <= high[2] and ma49[2] >= low[2])
isHittingMA50 = isHitting7 or isHitting8 or isHitting9


// calculate X,Y
isThereRoomToBreathe(upt) => 
    isThereRoom = false
    
    X = if upt
        ta.highest(high, XLookBack) - close
    else
        close - ta.lowest(low, XLookBack)

    Y = if upt
        close - ta.lowest(low, YLookBack)
    else
        ta.highest(high, YLookBack) - close

    isAlreadyHit = if upt 
        ta.highest(high, XLookBack) == high
    else
        ta.lowest(low, XLookBack) == low

    if isAlreadyHit
        isThereRoom := false
    else if X <= Y and (X >= (XYFactor * Y))
        isThereRoom := true
    else if X > Y
        isThereRoom := true

    toBeReturned = enable_X_Y_Calculations ?  isThereRoom : true
    toBeReturned


isProperMADiff() =>
    isProper_Temp = false
    if isHittingMA8 and not isHittingMA20 and not isHittingMA50
        isProper_Temp := ma1_2_diff >= MA_diff_mult_value
    else if isHittingMA8 and isHittingMA20 and isHittingMA50
        isProper_Temp := false
    else if isHittingMA20 or isHittingMA50 and not isHittingMA8
        isProper_Temp := ma2_3_diff >= MA_diff_mult_value and ma1_2_diff >= (MA_diff_mult_value / 2)

    isProperDistance = enable_MA_diff_calculation ? isProper_Temp : true
    isProperDistance
    

// if conditions met for Indicator Values
isConditionsMetUptrend = isUptrend and RSIValidationUptrend  and isMAsIncreasing and isThereRoomToBreathe(true) and isProperMADiff()
isConditionsMetDowntrend = isDowntrend and RSIValidationDowntrend and isMAsDecreasing and isThereRoomToBreathe(false) and isProperMADiff()

isConditionsMetUptrendFor50 = isUptrendFor50 and RSIValidationUptrend  and isMAsIncreasingFor50 and isThereRoomToBreathe(true) and isProperMADiff()
isConditionsMetDowntrendFor50 = isDowntrendFor50 and RSIValidationDowntrend and isMAsDecreasingFor50 and isThereRoomToBreathe(false) and isProperMADiff()



// is HRN Pattern Buy
is3rdBear = open[2] > close[2]
isPrevBear = open[1] > close[1]
isCurrentBull = open < close
isOHCL3BiggerThan2 = math.max(open[2], close[2]) > math.max(open[1],close[1]) and math.min(open[2],close[2]) > math.min(open[1],close[1]) and high[2] > high[1] and low[2] > low[1]
isHigherClose = close >= math.max(open[1],close[1])
isHigherOpen = open >= math.min(open[1],close[1])
isHigherShadow = high >= high[1]
body1 = math.abs(close - open)
body2 = math.abs(close[1] - open[1])
upperShadow1 = high - math.max(open, close)
upperShadow2 = high[1] - math.max(open[1], close[1])
isUpperShadowsSmallerThanBodies = upperShadow1 < body1 and upperShadow2 < body2
isCloseAbove8 = close > ma8
isCloseAbove20 = close > ma20
isCloseAbove50 = close > ma50
isHRNBuyPattern = is3rdBear and isPrevBear and isCurrentBull and isOHCL3BiggerThan2 and isHigherClose and isHigherOpen and isHigherShadow and isUpperShadowsSmallerThanBodies
isHRNBuy8 = isHRNBuyPattern and isCloseAbove8
isHRNBuy20 = isHRNBuyPattern and isCloseAbove20
isHRNBuy50 = isHRNBuyPattern and isCloseAbove50

// is HRN Pattern Sell
is3rdBull = open[2] < close[2]
isPrevBull = open[1] < close[1]
isCurrentBear = open > close
isOHCL3LowerThan2 = math.max(open[2], close[2]) < math.max(open[1],close[1]) and math.min(open[2],close[2]) < math.min(open[1],close[1]) and high[2] < high[1] and low[2] < low[1]
isLowerClose = close <= math.min(open[1],close[1])
isLowerOpen = open <= math.max(open[1],close[1])
isLowerShadow = low <= low[1]
body1S = math.abs(close - open)
body2S = math.abs(close[1] - open[1])
lowerShadow1 = math.min(open, close) - low
lowerShadow2 = math.min(open[1], close[1]) - low[1]
isLowerShadowsSmallerThanBodies = lowerShadow1 < body1S and lowerShadow2 < body2S
isCloseBelow8 = close < ma8
isCloseBelow20 = close < ma20
isCloseBelow50 = close < ma50
isHRNSellPattern = is3rdBull and isPrevBull and isCurrentBear and isOHCL3LowerThan2 and isLowerClose and isLowerOpen and isLowerShadow and isLowerShadowsSmallerThanBodies
isHRNSell8 = isHRNSellPattern and isCloseBelow8
isHRNSell20 = isHRNSellPattern and isCloseBelow20
isHRNSell50 = isHRNSellPattern and isCloseBelow50

// final conditions
conditionUptrend8 = isConditionsMetUptrend and isHittingMA8 and isHRNBuy8
conditionUptrend20 = isConditionsMetUptrend and isHittingMA20 and isHRNBuy20
conditionUptrend50 = isConditionsMetUptrendFor50 and isHittingMA50 and isHRNBuy50
conditionDowntrend8 = isConditionsMetDowntrend and isHittingMA8 and isHRNSell8
conditionDowntrend20 = isConditionsMetDowntrend and isHittingMA20 and isHRNSell20
conditionDowntrend50 = isConditionsMetDowntrendFor50 and isHittingMA50 and isHRNSell50

conditionUptrend = conditionUptrend8 or conditionUptrend20 or conditionUptrend50
conditionDowntrend = conditionDowntrend8 or conditionDowntrend20 or conditionDowntrend50


// styling
labelPositionBuy = low - (ta.atr(30) * 0.6)
labelPositionSell = high + (ta.atr(30) * 0.6)
labelColorBuy = input(color.blue, "Label Color Buy")
labelColorSell = input(color.red, "Label Color Sell")
labelColorBuyBG = input(color.new(color.blue, 90), "Label Color Buy Background")
labelColorSellBG = input(color.new(color.red, 90), "Label Color Sell Background")
MA1_color = input(color.red, "MA1 Color")
MA2_color = input(color.blue, "MA2 Color")
MA3_color = input(color.gray, "MA3 Color")
bgcolor(conditionUptrend ? labelColorBuyBG : na, 0)
bgcolor(conditionUptrend ? labelColorBuyBG : na, -1)
bgcolor(conditionUptrend ? labelColorBuyBG : na, -2)
bgcolor(conditionDowntrend ? labelColorSellBG : na, 0)
bgcolor(conditionDowntrend ? labelColorSellBG : na, -1)
bgcolor(conditionDowntrend ? labelColorSellBG : na, -2)
plot(ma8, color = MA1_color)
plot(ma20, color = MA2_color)
plot(ma50, color = MA3_color)
labelTextBuy = input("B-HRN", "Label Text for Buy indicator")
labelTextSell = input("S-HRN", "Label Text for Sell indicator")
labelTooltipBuy = input("Buy HRN MA", "Label Tooltip Text for Buy indicator")
labelTooltipSell = input("Sell HRN MA", "Label Tooltip Text for Sell indicator")


getCorrectMSG(type, uptrend, context) =>
    msg = ""
    if type == "text"
        msg := if uptrend
            labelTextBuy + context
        else
            labelTextSell + context
    if type == "tooltip"
        msg := if uptrend
            labelTooltipBuy + context
        else
            labelTooltipSell + context
    
    msg


context = if (conditionUptrend8 or conditionDowntrend8)
    str.tostring(MA1)
else if (conditionUptrend20 or conditionDowntrend20)
    str.tostring(MA2)
else if (conditionUptrend50 or conditionDowntrend50)
    str.tostring(MA3)


// main
if conditionUptrend
    label.new(bar_index,labelPositionBuy,text = getCorrectMSG("text", true, context),style = label.style_label_up, color = labelColorBuy,textcolor = color.white,tooltip = getCorrectMSG("tooltip", true, context) )
else if conditionDowntrend
    label.new(bar_index,labelPositionSell,text = getCorrectMSG("text", false, context),style = label.style_label_down,color = labelColorSell,textcolor = color.white,tooltip = getCorrectMSG("tooltip", false, context) )


